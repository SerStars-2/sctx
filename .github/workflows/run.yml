name: Run SCTX-Converter and Retrieve PNG

on:
  workflow_dispatch:
    inputs:
      sctx-url:
        description: 'URL of the .sctx file'
        required: true
        default: ''
      discord-user-id:
        description: 'Discord user ID to mention'
        required: true
        type: number
      discord-channel-id:
        description: 'Discord channel ID'
        required: true
        type: number
      discord-message-id:
        description: 'Discord message ID'
        required: true
        type: number

jobs:
  decode-sctx:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

  # - name: Fail on Purpose
  #   run: |
  #     echo "Failing this job on purpose to test the failure notification"
  #     exit 1

  # - name: Download SCTX-Converter
  #   run: |
  #     curl -L -o SctxConverter.exe https://github.com/Daniil-SV/SCTX-Converter/releases/latest/download/SctxConverter.exe

    - name: Extract filename from URL (PowerShell)
      id: extract_filename
      run: |
        $url = "${{ github.event.inputs.sctx-url }}"
        Write-Host "URL: $url"
        $filename = $url -split '\?' | Select-Object -First 1
        $filename = Split-Path $filename -Leaf
        $basename = [System.IO.Path]::GetFileNameWithoutExtension($filename)
        Write-Host "Extracted filename: $filename"
        Write-Host "Base name: $basename"
        echo "filename=$filename" >> $env:GITHUB_OUTPUT
        echo "basename=$basename" >> $env:GITHUB_OUTPUT

    - name: Download .sctx file
      run: |
        echo "Downloading file from URL: ${{ github.event.inputs.sctx-url }}"
        Invoke-WebRequest -Uri "${{ github.event.inputs.sctx-url }}" -OutFile "${{ steps.extract_filename.outputs.filename }}"
        if (!(Test-Path "${{ steps.extract_filename.outputs.filename }}")) {
          Write-Error "Failed to download SCTX file"
          exit 1
        }

    - name: Convert .sctx to .png
      run: |
        .\SctxConverter.exe decode "${{ steps.extract_filename.outputs.filename }}" --texture-only
      shell: cmd

    - name: Verify PNG file existence
      id: verify_png
      run: |
        $pngPath = "${{ steps.extract_filename.outputs.basename }}.png"
        if (Test-Path $pngPath) {
          Write-Host "PNG file exists at: $pngPath"
          echo "png_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Error "PNG file was not created at: $pngPath"
          echo "png_exists=false" >> $env:GITHUB_OUTPUT
          exit 1
        }

    # - name: Post to Discord
    #   if: steps.verify_png.outputs.png_exists == 'true'
    #   uses: tsickert/discord-webhook@v6.0.0
    #   with:
    #     webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
    #     filename: "${{ steps.extract_filename.outputs.basename }}.png"
    #     content: "<@${{ github.event.inputs.discord-user-id }}>"

    - name: Post to Discord
      if: steps.verify_png.outputs.png_exists == 'true'
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        CHANNEL_ID: ${{ github.event.inputs.discord-channel-id }}
        MESSAGE_ID: ${{ github.event.inputs.discord-message-id }}
        USER_ID: ${{ github.event.inputs.discord-user-id }}
        FILE: "${{ steps.extract_filename.outputs.basename }}.png"
      run: |
        $headers = @{
          "Authorization" = "Bot $env:DISCORD_BOT_TOKEN"
          "Content-Type"  = "multipart/form-data"
        }

        $contentJson = @{
          content = "<@$env:USER_ID>"
          message_reference = @{
            message_id = "$env:MESSAGE_ID"
            channel_id = "$env:CHANNEL_ID"
            fail_if_not_exists = $false
          }
        } | ConvertTo-Json -Depth 3

        $form = @{
          "payload_json" = $contentJson
          "file" = Get-Item -Path $env:FILE
        }

        Invoke-RestMethod -Uri "https://discord.com/api/v10/channels/$env:CHANNEL_ID/messages" `
                          -Method Post `
                          -Headers $headers `
                          -Form $form
      shell: pwsh

    # - name: If Failed to Convert
    #   if: failure()
    #   uses: sarisia/actions-status-discord@v1.15.1
    #   env:
    #     DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    #   with:
    #     nodetail: true
    #     nofail: false
    #     title: |
    #       Failed to convert ${{ steps.extract_filename.outputs.filename }}
    #     content: |
    #       <@${{ github.event.inputs.discord-user-id }}>

    - name: If Failed to Convert
      if: failure()
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        CHANNEL_ID: ${{ github.event.inputs.discord-channel-id }}
        MESSAGE_ID: ${{ github.event.inputs.discord-message-id }}
        USER_ID: ${{ github.event.inputs.discord-user-id }}
        FILENAME: ${{ steps.extract_filename.outputs.filename }}
      run: |
        $headers = @{
          "Authorization" = "Bot $env:DISCORD_BOT_TOKEN"
          "Content-Type"  = "application/json"
        }

        $body = @{
          content = "<@$env:USER_ID> ‚ùå Failed to convert **$env:FILENAME** to PNG."
          message_reference = @{
            message_id = "$env:MESSAGE_ID"
            channel_id = "$env:CHANNEL_ID"
            fail_if_not_exists = $false
          }
        } | ConvertTo-Json -Depth 3

        Invoke-RestMethod -Uri "https://discord.com/api/v10/channels/$env:CHANNEL_ID/messages" `
                          -Method Post `
                          -Headers $headers `
                          -Body $body
      shell: pwsh
