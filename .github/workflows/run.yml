name: Run SCTX-Converter and Retrieve PNG

on:
  workflow_dispatch:
    inputs:
      sctx-url:
        description: 'URL of the .sctx file'
        required: true
        default: ''
      discord-user-id:
        description: 'Discord user ID to mention'
        required: true
        type: number
      discord-channel-id:
        description: 'Discord channel ID'
        required: true
        type: number
      discord-message-id:
        description: 'Discord message ID'
        required: true
        type: number

jobs:
  decode-sctx:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Extract filename from URL (PowerShell)
      id: extract_filename
      run: |
        $url = "${{ github.event.inputs.sctx-url }}"
        Write-Host "URL: $url"
        $filename = $url -split '\?' | Select-Object -First 1
        $filename = Split-Path $filename -Leaf
        $basename = [System.IO.Path]::GetFileNameWithoutExtension($filename)
        Write-Host "Extracted filename: $filename"
        Write-Host "Base name: $basename"
        echo "filename=$filename" >> $env:GITHUB_OUTPUT
        echo "basename=$basename" >> $env:GITHUB_OUTPUT

    - name: Download .sctx file
      run: |
        echo "Downloading file from URL: ${{ github.event.inputs.sctx-url }}"
        Invoke-WebRequest -Uri "${{ github.event.inputs.sctx-url }}" -OutFile "${{ steps.extract_filename.outputs.filename }}"
        if (!(Test-Path "${{ steps.extract_filename.outputs.filename }}")) {
          Write-Error "Failed to download SCTX file"
          exit 1
        }

    - name: Convert .sctx to .png
      run: |
        .\SctxConverter.exe decode "${{ steps.extract_filename.outputs.filename }}" --texture-only
      shell: cmd

    - name: Verify PNG file existence
      id: verify_png
      run: |
        $pngPath = "${{ steps.extract_filename.outputs.basename }}.png"
        if (Test-Path $pngPath) {
          Write-Host "PNG file exists at: $pngPath"
          echo "png_exists=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Error "PNG file was not created at: $pngPath"
          echo "png_exists=false" >> $env:GITHUB_OUTPUT
          exit 1
        }

    - name: Post to Discord (reply with file)
      if: steps.verify_png.outputs.png_exists == 'true'
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        CHANNEL_ID: ${{ github.event.inputs.discord-channel-id }}
        MESSAGE_ID: ${{ github.event.inputs.discord-message-id }}
        USER_ID: ${{ github.event.inputs.discord-user-id }}
        FILE_PATH: "${{ steps.extract_filename.outputs.basename }}.png"
      shell: pwsh
      run: |
        $boundary = [System.Guid]::NewGuid().ToString()
        $LF = "`r`n"

        # Prepare JSON payload for the message
        $payload = @{
          content = "<@$env:USER_ID> Here's your PNG!"
          message_reference = @{
            message_id = $env:MESSAGE_ID
            channel_id = $env:CHANNEL_ID
            fail_if_not_exists = $false
          }
          allowed_mentions = @{
            parse = @("users")
          }
        } | ConvertTo-Json -Depth 5

        # Build multipart body manually
        $payloadPart = "--$boundary$LF" +
                       "Content-Disposition: form-data; name=`"payload_json`"$LF$LF" +
                       "$payload$LF"

        $fileName = [System.IO.Path]::GetFileName($env:FILE_PATH)
        $fileHeader = "--$boundary$LF" +
                      "Content-Disposition: form-data; name=`"file`"; filename=`"$fileName`"$LF" +
                      "Content-Type: image/png$LF$LF"

        $fileContent = [System.IO.File]::ReadAllBytes($env:FILE_PATH)
        $fileFooter = "$LF--$boundary--$LF"

        # Convert string parts to bytes
        $payloadBytes = [System.Text.Encoding]::UTF8.GetBytes($payloadPart + $fileHeader)
        $footerBytes = [System.Text.Encoding]::UTF8.GetBytes($fileFooter)

        # Combine all bytes
        $bodyBytes = New-Object byte[] ($payloadBytes.Length + $fileContent.Length + $footerBytes.Length)
        [Array]::Copy($payloadBytes, 0, $bodyBytes, 0, $payloadBytes.Length)
        [Array]::Copy($fileContent, 0, $bodyBytes, $payloadBytes.Length, $fileContent.Length)
        [Array]::Copy($footerBytes, 0, $bodyBytes, $payloadBytes.Length + $fileContent.Length, $footerBytes.Length)

        # Headers
        $headers = @{
          Authorization = "Bot $env:DISCORD_BOT_TOKEN"
          "Content-Type" = "multipart/form-data; boundary=$boundary"
        }

        # Send POST request to Discord API to reply with file
        Invoke-RestMethod -Uri "https://discord.com/api/v10/channels/$env:CHANNEL_ID/messages" `
                          -Method POST `
                          -Headers $headers `
                          -Body $bodyBytes

    - name: If Failed to Convert
      if: failure()
      env:
        DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_TOKEN }}
        CHANNEL_ID: ${{ github.event.inputs.discord-channel-id }}
        MESSAGE_ID: ${{ github.event.inputs.discord-message-id }}
        USER_ID: ${{ github.event.inputs.discord-user-id }}
        FILENAME: ${{ steps.extract_filename.outputs.filename }}
      shell: pwsh
      run: |
        $headers = @{
          Authorization = "Bot $env:DISCORD_BOT_TOKEN"
          "Content-Type" = "application/json"
        }

        $body = @{
          content = "<@$env:USER_ID> ‚ùå Failed to convert **$env:FILENAME** to PNG."
          message_reference = @{
            message_id = $env:MESSAGE_ID
            channel_id = $env:CHANNEL_ID
            fail_if_not_exists = $false
          }
          allowed_mentions = @{
            parse = @("users")
          }
        } | ConvertTo-Json -Depth 5

        Invoke-RestMethod -Uri "https://discord.com/api/v10/channels/$env:CHANNEL_ID/messages" `
                          -Method POST `
                          -Headers $headers `
                          -Body $body
